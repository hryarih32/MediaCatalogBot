# Changelog

## [2.0.0] - 2025-05-25 

### Added

-   **Multi-User Media Request System:**
    -   Introduced `ADMIN` and `STANDARD_USER` roles. The primary `CHAT_ID` (from `config.py`) is the initial main `ADMIN`. Other interacting users are currently treated as `STANDARD_USER`. (Full user management via GUI/commands is planned).
    -   **Standard Users:**
        *   Can search for movies (via Radarr) and TV shows (via Sonarr) and submit them as **requests** for admin approval.
        *   Have a new **"üìã My Requests"** menu to view a paginated list of their submitted requests and their current status (Pending, Approved, Rejected, Add Failed).
    -   **Administrators:**
        *   Have a new **"üìÆ Admin Requests (X)"** button on their main menu, where (X) dynamically shows the count of pending user requests.
        *   Can view details of pending requests.
        *   Can **"‚úÖ Approve"** pending requests, which then initiates the standard Radarr/Sonarr add flow for the admin (allowing choice of default or custom settings). The request status updates to "approved" on successful addition or "add_failed" if issues occur during the admin's add attempt.
        *   Can **"‚ùå Reject"** pending requests, with an option to provide a rejection reason. The request status updates to "rejected".
        *   Can access a **"üìú Request History"** to view previously approved, rejected, and add-failed requests.
    -   All media request data is now stored in `data/requests.json`.
-   **User-Specific Message Persistence:** The main menu message and universal status message are now managed per user, allowing for individual, persistent interface states. (Currently uses per-user files; will be consolidated into `bot_state.json` in a future update).

### Changed

-   **Media Addition Workflow:**
    *   The "Add Movie" and "Add TV Show" buttons in the main menu now dynamically display as "Request Movie/Show" for Standard Users, leading to a request submission flow. For Admins, they lead to a direct add flow.
    *   Internal Radarr/Sonarr add flow logic (`*_add_flow.py` files) now supports being initiated by an admin fulfilling an approved request, correctly updating the request's status upon completion.
-   **Notifications:**
    *   Direct Telegram message notifications to users regarding the status of their requests (approved/rejected) have been **removed**. Users now check their "My Requests" page.
    *   Direct Telegram message notifications to administrators for new pending requests have been **removed**. Administrators should monitor the count on the "Admin Requests (X)" button in their main menu.
-   **ABDM Download Access:** The "Add Download (ABDM)" feature is confirmed as available only to the **Primary Administrator**.
-   **`/status` Command:** Now available to both `ADMIN` and `STANDARD_USER` roles, allowing them to refresh their own universal status message.
-   **Internal `CallbackData` Relocation:** (Completed in prior preparatory work) The `CallbackData` enum was moved to `src/bot/bot_callback_data.py` to ensure it's not part of the user-editable `config.py`.

### Fixed

-   Addressed multiple MarkdownV2 parsing errors that could occur in dynamic menu text and status messages, particularly improving the display of the "My Requests" and "Admin Requests" views.
-   Corrected callback handler registrations and internal logic to ensure the new admin request management (viewing pending, details, approving, rejecting, history) functions as intended.
-   Ensured that an administrator's typed "rejection reason" message is deleted after input, maintaining chat cleanliness.
-   Resolved `AttributeError` and logic issues related to passing media identification data when an admin approves a request and initiates the subsequent Radarr/Sonarr add flow.

### Known Issues / Future Work

-   Full user management (adding/removing users, assigning distinct `ADMIN` vs. `STANDARD_USER` roles beyond the primary admin) is not yet implemented via the bot or GUI. This is a high-priority item for future updates (targeted for Phase 4).
-   A dedicated flow for unknown users to `REQUEST_ACCESS` to the bot is planned (Phase 10).
-   State management for `requests.json` and other bot state (like message IDs, user data) will be enhanced with atomic saves and backup/recovery mechanisms (Phase 6).
-   The detailed view for items in a user's "My Requests" list is currently basic; more detailed information could be added.
-   Plex controls and other administrative features are still primarily restricted to users identified as `ADMIN` (currently just the primary admin). Broader, role-based access to these features will be considered in later phases.

## [1.1.0] - 2025-05-23

### Added

-   **AB Download Manager (ABDM) Integration**:
    -   New API integration to remotely add and start downloads in AB Download Manager via its local API.
    -   New "üì• Add Download (ABDM)" button in the main menu for direct URL submission.
    -   Downloads are added and started silently by default, using ABDM's internal settings for filename and save path.
    -   New configuration options in the GUI (`/settings`):
        -   `ABDM_ENABLED`: Toggle ABDM API features.
        -   `ABDM_PORT`: Set the API port for ABDM (default: `15151`).
        -   `ABDM_LAUNCHER_ENABLED`, `ABDM_LAUNCHER_NAME`, `ABDM_LAUNCHER_PATH`: Configure a button to launch the ABDM executable from the bot's "Launchers & Scripts" menu.
-   Updated `README.md` to reflect new ABDM integration, usage instructions, and features.
-   Updated `BOT_USAGE.md` to include guidance on using the new "Add Download (ABDM)" functionality.
-   Enhanced error handling and logging for external API interactions.

### Changed

-   Refactored core Telegram handler setup (`src/bot/bot_telegram.py`) for better modularity and inclusion of new commands.
-   Refined config validation (`src/config/config_manager.py`) to include new ABDM settings.

### Fixed

-   Resolved an issue where the "Add Download (ABDM)" button's callback was not correctly registered after the initial implementation, causing it to not respond.