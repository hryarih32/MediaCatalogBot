# Changelog

## [3.1.0] - 2025-05-29

### Added
-   **Role-Based Admin Assignment:** Only the Primary Administrator can assign other users the `ADMIN` role during the access request approval process. Other Admins can only approve new users as `STANDARD_USER`.

### Changed
-   **Media Request Workflow:** The status of a user's media request is now only changed from "pending" to "approved" or "add_failed" *after* an administrator successfully completes (or fails during) the Radarr/Sonarr add process. If an admin cancels the add flow after initially "approving" the request (but before adding), the request reverts to "pending".
-   **Bot Startup Interface Refresh:** Upon bot startup, main menus and universal status messages are now refreshed for all known `ADMIN` and `STANDARD_USER` roles, not just the Primary Admin. `UNKNOWN` users are not affected by this startup refresh.

### Fixed
-   Resolved an issue where Standard Users were incorrectly presented with admin-level add options after selecting a media item from Radarr/Sonarr search results; they are now correctly routed to the "Submit Request" flow.
-   Corrected several MarkdownV2 parsing errors in dynamically generated messages, particularly for the user access approval status message and ABDM download initiation message, to prevent `BadRequest` errors.
-   Ensured that newly approved users receive an updated universal status message appropriate for their new role, in addition to their refreshed main menu.
-   Addressed a potential `ImportError` related to `handle_request_access_button` by adjusting import strategy (though a more robust solution might have been implemented previously, this ensures it's noted as resolved).
-   Fixed issues with `config.py` regeneration and validation where integer values (like `ABDM_PORT`) could be incorrectly written or validated as strings after GUI saves, leading to "invalid configuration" errors. Integer fields in `config_definitions.py` now use integer defaults, and regeneration/validation logic is more type-aware.
-   Addressed several "Unrecognized command" errors by ensuring sub-menu navigation callbacks (e.g., for Plex Controls, Radarr/Sonarr Queues & Maintenance) are handled by specific `CallbackQueryHandler`s in `bot_telegram.py` rather than falling through to the generic main menu handler.

## [3.0.0] - 2025-05-27

### Added

-   **Dynamic Launchers & Scripts System (Phase A):**
    -   Replaced static launcher and script configurations (from `config.py`) with a dynamic system.
    -   Launchers are now managed via the Bot Settings GUI (`/settings` command for Primary Admin) and stored in `data/bot_state.json`.
    -   Supports organizing launchers into user-defined subgroups.
    -   New "üöÄ Launchers" main menu button for Primary Admins to access and execute configured dynamic launchers.
    -   Automatic migration of old static launcher/script settings from `config.py` to the new dynamic system on first run after update (if `static_launchers_migrated` flag in `bot_state.json` is false).
-   **Plex Search for Standard Users (Phase B):**
    -   Standard Users can now use the "üîç Search Plex" feature.
    -   They receive a rich, button-based list of search results, similar to Admins.
    -   Standard Users can navigate to view details of movies, shows, seasons, and episodes.
    -   Administrative action buttons (e.g., "‚ôªÔ∏è Refresh Metadata") within Plex detail views are hidden for Standard Users.
-   **User Access Request System (Phase C):**
    -   Introduced `ROLE_UNKNOWN` for users not yet recognized by the bot.
    -   Unknown users are presented with a restricted main menu featuring a "üö™ Request Access" button.
    -   Submitted access requests are stored in `data/bot_state.json["access_requests_pending"]`.
    -   Administrators see a "üîë User Access (X)" button on their main menu, where (X) is the count of pending access requests.
    -   Administrators can view pending access requests, and approve (assigning `ROLE_STANDARD_USER` or `ROLE_ADMIN`) or deny them.
    -   User notifications for access request status changes have been removed; users and admins rely on menu indicators/views.
-   **Configuration File Regeneration (Phase R):**
    -   The `data/config.py` file is now automatically regenerated on each bot startup based on the structure and defaults in `config_templates/config.py.default`.
    -   Existing user-set values in `data/config.py` are preserved for recognized configuration keys.
    -   New configuration keys from the template are added with their default values.
    -   Obsolete keys are removed from `data/config.py`, ensuring the configuration stays aligned with the current bot version.
-   **Consolidated Message Persistence:**
    -   Main menu message IDs and universal status message IDs are now stored per-user within `data/bot_state.json` instead of separate files, managed by `user_manager.py`.
-   **Log File Management:**
    -   Log files are now saved into a dedicated `data/log/` subdirectory.
    -   Implemented daily log rotation, keeping the last 7 days of logs by default (`mediabot.log` and `mediabot.log.YYYY-MM-DD`).
-   **Queue Item Actions:**
    -   Added a "üö´ Blocklist Only" option for Radarr and Sonarr download queue items, allowing items to be blocklisted without an immediate re-search.

### Changed

-   **Configuration (`config.py`):**
    -   Removed all static `SCRIPT_*_ENABLED/NAME/PATH` and `*_LAUNCHER_ENABLED/NAME/PATH` settings. These are now managed by the dynamic launcher system.
    -   `config_templates/config.py.default` updated to reflect the new minimal set of direct configurations.
    -   Improved handling of integer-based configuration values (e.g., `ABDM_PORT`) during GUI saves and config regeneration to prevent validation errors.
-   **Plex Controls Access:** While Standard Users can now browse Plex search results and details, full Plex Controls (Now Playing, Library/Server Tools etc.) remain Admin-only.
-   **Main Menu:** "Search Plex" button removed from the Admin's main menu (Admins access it via "Plex Controls"). It remains on the Standard User's main menu.
-   **Internal Refinements:** Various improvements to MarkdownV2 escaping, callback handling, and role checking in Plex, Radarr, and Sonarr menu handlers. Enhanced robustness of configuration loading and validation.

### Fixed

-   Resolved `telegram.error.BadRequest: Can't parse entities` errors in several menu handlers by ensuring correct MarkdownV2 escaping, particularly for parentheses and other special characters in dynamically generated text (e.g., in ABDM download messages, access request approval messages).
-   Corrected logic in Radarr/Sonarr add flows (`*_movie_selection_callback`, `*_show_selection_callback`) to ensure Standard Users are correctly routed to the "Submit Request" UI after selecting a media item, preventing them from seeing admin-only add/customization options.
-   Addressed an `ImportError` related to `handle_request_access_button` by adjusting import order/timing to resolve a circular dependency.
-   Fixed an issue where sub-menu callback query handlers were not being correctly prioritized over the main menu callback handler, leading to "Unrecognized command" errors for some sub-menu navigations. These sub-menu entry points are now handled by more specific handlers in `bot_telegram.py`.
-   Addressed a Radarr HTTP 500 error that could occur after blocklisting a queue item and attempting an immediate re-search; the bot now primarily reports the blocklist success and advises manual search check if Radarr encounters an internal error.

### Known Issues / Future Work

-   Full user management (adding/removing users, modifying roles via GUI/bot commands beyond initial approval) is still pending (Phase 4).
-   State management for `requests.json` and `bot_state.json` will be further enhanced with more robust atomic saves and backup/recovery mechanisms (Phase 6).

## [2.0.0] - 2025-05-25 

### Added

-   **Multi-User Media Request System:**
    -   Introduced `ADMIN` and `STANDARD_USER` roles. The primary `CHAT_ID` (from `config.py`) is the initial main `ADMIN`. Other interacting users are currently treated as `STANDARD_USER`. (Full user management via GUI/commands is planned).
    -   **Standard Users:**
        *   Can search for movies (via Radarr) and TV shows (via Sonarr) and submit them as **requests** for admin approval.
        *   Have a new **"üìã My Requests"** menu to view a paginated list of their submitted requests and their current status (Pending, Approved, Rejected, Add Failed).
    -   **Administrators:**
        *   Have a new **"üìÆ Admin Requests (X)"** button on their main menu, where (X) dynamically shows the count of pending user requests.
        *   Can view details of pending requests.
        *   Can **"‚úÖ Approve"** pending requests, which then initiates the standard Radarr/Sonarr add flow for the admin (allowing choice of default or custom settings). The request status updates to "approved" on successful addition or "add_failed" if issues occur during the admin's add attempt.
        *   Can **"‚ùå Reject"** pending requests, with an option to provide a rejection reason. The request status updates to "rejected".
        *   Can access a **"üìú Request History"** to view previously approved, rejected, and add-failed requests.
    -   All media request data is now stored in `data/requests.json`.
-   **User-Specific Message Persistence:** The main menu message and universal status message are now managed per user, allowing for individual, persistent interface states. (Initially used per-user files; consolidated in 3.0.0).

### Changed

-   **Media Addition Workflow:**
    *   The "Add Movie" and "Add TV Show" buttons in the main menu now dynamically display as "Request Movie/Show" for Standard Users, leading to a request submission flow. For Admins, they lead to a direct add flow.
    *   Internal Radarr/Sonarr add flow logic (`*_add_flow.py` files) now supports being initiated by an admin fulfilling an approved request, correctly updating the request's status upon completion.
-   **Notifications:**
    *   Direct Telegram message notifications to users regarding the status of their requests (approved/rejected) have been **removed**. Users now check their "My Requests" page.
    *   Direct Telegram message notifications to administrators for new pending requests have been **removed**. Administrators should monitor the count on the "Admin Requests (X)" button in their main menu.
-   **ABDM Download Access:** The "Add Download (ABDM)" feature is confirmed as available only to the **Primary Administrator**.
-   **`/status` Command:** Now available to both `ADMIN` and `STANDARD_USER` roles, allowing them to refresh their own universal status message.
-   **Internal `CallbackData` Relocation:** (Completed in prior preparatory work) The `CallbackData` enum was moved to `src/bot/bot_callback_data.py` to ensure it's not part of the user-editable `config.py`.

### Fixed

-   Addressed multiple MarkdownV2 parsing errors that could occur in dynamic menu text and status messages, particularly improving the display of the "My Requests" and "Admin Requests" views.
-   Corrected callback handler registrations and internal logic to ensure the new admin request management (viewing pending, details, approving, rejecting, history) functions as intended.
-   Ensured that an administrator's typed "rejection reason" message is deleted after input, maintaining chat cleanliness.
-   Resolved `AttributeError` and logic issues related to passing media identification data when an admin approves a request and initiates the subsequent Radarr/Sonarr add flow.

### Known Issues / Future Work

-   Full user management (adding/removing users, assigning distinct `ADMIN` vs. `STANDARD_USER` roles beyond the primary admin) is not yet implemented via the bot or GUI. This is a high-priority item for future updates (targeted for Phase 4).
-   A dedicated flow for unknown users to `REQUEST_ACCESS` to the bot is planned (Phase 10).
-   State management for `requests.json` and other bot state (like message IDs, user data) will be enhanced with atomic saves and backup/recovery mechanisms (Phase 6).
-   The detailed view for items in a user's "My Requests" list is currently basic; more detailed information could be added.
-   Plex controls and other administrative features are still primarily restricted to users identified as `ADMIN` (currently just the primary admin). Broader, role-based access to these features will be considered in later phases.

## [1.1.0] - 2025-05-23

### Added

-   **AB Download Manager (ABDM) Integration**:
    -   New API integration to remotely add and start downloads in AB Download Manager via its local API.
    -   New "üì• Add Download (ABDM)" button in the main menu for direct URL submission.
    -   Downloads are added and started silently by default, using ABDM's internal settings for filename and save path.
    -   New configuration options in the GUI (`/settings`):
        -   `ABDM_ENABLED`: Toggle ABDM API features.
        -   `ABDM_PORT`: Set the API port for ABDM (default: `15151`).
        -   `ABDM_LAUNCHER_ENABLED`, `ABDM_LAUNCHER_NAME`, `ABDM_LAUNCHER_PATH`: Configure a button to launch the ABDM executable from the bot's "Launchers & Scripts" menu.
-   Updated `README.md` to reflect new ABDM integration, usage instructions, and features.
-   Updated `BOT_USAGE.md` to include guidance on using the new "Add Download (ABDM)" functionality.
-   Enhanced error handling and logging for external API interactions.

### Changed

-   Refactored core Telegram handler setup (`src/bot/bot_telegram.py`) for better modularity and inclusion of new commands.
-   Refined config validation (`src/config/config_manager.py`) to include new ABDM settings.

### Fixed

-   Resolved an issue where the "Add Download (ABDM)" button's callback was not correctly registered after the initial implementation, causing it to not respond.